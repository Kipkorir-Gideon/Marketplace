from fastapi import FastAPI, HTTPException
from app.models import User, UserCreate, UserUpdate
from app.utils import create_user, get_user, update_user, delete_user

app = FastAPI()

@app.post("/register", response_model=User)
async def register_user(user: UserCreate):
    db_user = await create_user(user)
    if not db_user:
        raise HTTPException(status_code=400, detail="User already exists")
    return db_user

@app.post("/login")
async def login_user(user: UserCreate):
    token = await authenticate_user(user)
    if not token:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    return {"access_token": token}

@app.get("/{user_id}", response_model=User)
async def read_user(user_id: int):
    user = await get_user(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.put("/{user_id}", response_model=User)
async def update_user_profile(user_id: int, user: UserUpdate):
    updated_user = await update_user(user_id, user)
    if not updated_user:
        raise HTTPException(status_code=404, detail="User not found")
    return updated_user

@app.delete("/{user_id}")
async def delete_user_profile(user_id: int):
    success = await delete_user(user_id)
    if not success:
        raise HTTPException(status_code=404, detail="User not found")
    return {"detail": "User deleted successfully"}